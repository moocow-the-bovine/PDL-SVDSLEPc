##-*- Mode: CPerl -*-

##======================================================================
## Header Administrivia
##======================================================================

our $VERSION = "0.001";
pp_setversion($VERSION);

do "./Config.cache";
if ($@) {
  warn("$0: could not load cache data from './Config.cache': $@");
}

##------------------------------------------------------
## Header: PDL_Indx
require PDL::Core;
my ($INDX);
if ($cconfig{ENABLE_PDL_INDX} && defined(&PDL::indx)) {
  ##-- use this to support 64-bit indices with PDL_Indx (but which() and friends don't return them!)
  #print STDERR "PDL >= v2.007 detected : using built-in PDL_Indx type\n";
  $INDX = 'indx';
} else {
  #print STDERR "PDL < v2.007 detected : using hacked PDL_Indx type\n";
  $INDX = 'int';
  #pp_addpm("*svdlibc_indx = \&PDL::long;\n");
}


##------------------------------------------------------
## Header: pods
pp_addpm({At=>'Top'},<<'EOPM');
=pod

=head1 NAME

PDL::SVDSLEPc - PDL interface to SLEPc sparse singular value decomposition

=head1 SYNOPSIS

 use PDL;
 use PDL::SVDSLEPc;

 ##---------------------------------------------------------------------
 ## Input matrix (dense)
 ##---------------------------------------------------------------------
 $m = 100;                    ##-- number of rows
 $n = 50;                     ##-- number of columns
 $a = random(double,$m,$n);   ##-- random matrix

 ##---------------------------------------------------------------------
 ## Input matrix (sparse)
 ##---------------------------------------------------------------------
 $d  = 0.1;                   ##-- target density of sparse matrix
 $ix = (random(2,$d*$m*$n)    ##-- random whichND()-style index piddle
         * pdl([$m,$n])       ##   ... of dimension ($m,$n)
        )->long               ##   ... as integer values
         ->uniqvec;           ##   ... ensure uniqueness
 $nnz = $wnd->dim(1);         ##-- number of non-zeroes
 $nz  = random($nnz);         ##-- random non-zero values

 ##---------------------------------------------------------------------
 ## Output pdls [TODO]
 ##---------------------------------------------------------------------
 $d  = $n;                   ##-- max number of output dimensions
 $ut = zeroes(double,$m,$d); ##-- left singular components
 $s  = zeroes(double,$d);    ##-- singular values (diagnonal vector)
 $vt = zeroes(double,$n,$d); ##-- right singular components

 ##---------------------------------------------------------------------
 ## Singular Value Decomposition [TODO]
 ##---------------------------------------------------------------------
 svdlas2d($a, $maxiters, $end, $kappa, $ut, $s, $vt);

=head1 DESCRIPTION

PDL::SVDLIBC provides a PDL interface to the SVDLIBC routines
for singular value decomposition of large sparse matrices.
SVDLIBC is available from http://tedlab.mit.edu/~dr/SVDLIBC/

=cut

EOPM
## /pm additions
##------------------------------------------------------

##------------------------------------------------------
## Exports: None
#pp_export_nothing();


##------------------------------------------------------
## Includes / defines
pp_addhdr(<<'EOH');

#include <slepcversion.h>
#include <slepcsvd.h>

/*#define CDEBUG 1*/
/*#define DEBUG_CODE 1*/

EOH

##======================================================================
## PDL::PP Wrappers
##======================================================================

##======================================================================
## Constants
pp_addpm(<<'EOPM');

use strict;

=pod

=head1 CONSTANTS

PDL::SVDSLEPc provides access to the following SLEPc constants:


EOPM

##--------------------------------------------------------------
## Constants: slepc_version
pp_addpm(<<'EOPM');

=pod

=head2 PDL::SVDSLEPc::slepc_version()

Returns a string representing the SLEPc library version
this module was compiled with.

=cut

EOPM

pp_addxs('','

char *
slepc_version()
INIT:
  char buf[PETSC_MAX_PATH_LEN];
CODE:
  SlepcGetVersion(buf,PETSC_MAX_PATH_LEN);
  RETVAL = buf;
OUTPUT:
  RETVAL

');

##--------------------------------------------------------------
## Constants: petsc_version
pp_addpm(<<'EOPM');

=pod

=head2 PDL::SVDSLEPc::petsc_version()

Returns a string representing the PETSc library version
this module was compiled with.

=cut

EOPM

pp_addxs('','

char *
petsc_version()
INIT:
  char buf[PETSC_MAX_PATH_LEN];
CODE:
  PetscGetVersion(buf,PETSC_MAX_PATH_LEN);
  RETVAL = buf;
OUTPUT:
  RETVAL

');

##--------------------------------------------------------------
## Constants: library_version
pp_addpm(<<'EOPM');

=pod

=head2 PDL::SVDSLEPc::library_version()

In list context returns a C<petsc_version(),slepc_version()>,
in scalar context returns a string with both versions separated
with a semicolon.

=cut

sub library_version {
  my @v = (petsc_version(),slepc_version());
  return wantarray ? @v : join('; ', @v);
}

EOPM


##======================================================================
## SVD Utilities

pp_addpm(<<'EOPM');

=pod

=head1 SVD UTILITIES

The following functions are provided as quick and dirty wrappers
for the SLEPc L<SVD|http://slepc.upv.es/documentation/current/docs/manualpages/SVD/index.html>
solver class.

=cut

EOPM


##======================================================================
## Footer Administrivia
##======================================================================

##------------------------------------------------------
## footer: pm additions
pp_addpm(<<'EOPM');

##---------------------------------------------------------------------
=pod

=head1 ACKNOWLEDGEMENTS

Perl by Larry Wall.

PDL by Karl Glazebrook, Tuomas J. Lukka, Christian Soeller, and others.

SLEPc by Carmen Campos, Jose E. Roman, Eloy Romero, and Andres Tomas.

=cut

##----------------------------------------------------------------------
=pod

=head1 KNOWN BUGS

There should really be a more general and abstract PDL interface to SLEPc.

=cut


##---------------------------------------------------------------------
=pod

=head1 AUTHOR

Bryan Jurish E<lt>moocow@cpan.orgE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2015, Bryan Jurish.  All rights reserved.

This package is free software, and entirely without warranty.
You may redistribute it and/or modify it under the same terms
as Perl itself, either version 5.20.2 or any newer version of Perl 5
you have available.

=head1 SEE ALSO

L<perl(1)|perl>,
L<PDL(3perl)|PDL>,
L<PDL::CCS(3perl)|PDL::CCS>,
L<PDL::SVDLIBC(3perl)|PDL::SVDLIBC>,
the SLEPc documentation at L<http://slepc.upv.es/documentation/current/docs/index.html>.

=cut

EOPM


# Always make sure that you finish your PP declarations with
# pp_done
pp_done();
##----------------------------------------------------------------------
