##-*- Mode: CPerl -*-

##======================================================================
## Header Administrivia
##======================================================================

our $VERSION = "0.16";
pp_setversion($VERSION);

do "./Config.cache";
if ($@) {
  warn("$0: could not load cache data from './Config.cache': $@");
}

##------------------------------------------------------
## Header: PDL_Indx
require PDL::Core;
my ($INDX);
if ($cconfig{ENABLE_PDL_INDX} && defined(&PDL::indx)) {
  ##-- use this to support 64-bit indices with PDL_Indx (but which() and friends don't return them!)
  #print STDERR "PDL >= v2.007 detected : using built-in PDL_Indx type\n";
  $INDX = 'indx';
} else {
  #print STDERR "PDL < v2.007 detected : using hacked PDL_Indx type\n";
  $INDX = 'int';
  #pp_addpm("*svdlibc_indx = \&PDL::long;\n");
}


##------------------------------------------------------
## Header: pods
pp_addpm({At=>'Top'},<<'EOPM');
=pod

=head1 NAME

PDL::SVDLIBC - PDL interface to Doug Rohde's SVD C Library

=head1 SYNOPSIS

 use PDL;
 use PDL::SVDLIBC;

 ##---------------------------------------------------------------------
 ## Input matrix (dense)
 ##---------------------------------------------------------------------
 $n = 100;                  ##-- number of columns
 $m = 50;                   ##-- number of rows
 $a = random(double,$n,$m); ##-- random matrix

 ##---------------------------------------------------------------------
 ## Output pdls
 ##---------------------------------------------------------------------
 $d  = $n;                   ##-- max number of output dimensions
 $ut = zeroes(double,$m,$d); ##-- left singular components
 $s  = zeroes(double,$d);    ##-- singular values (diagnonal vector)
 $vt = zeroes(double,$n,$d); ##-- right singular components

 ##---------------------------------------------------------------------
 ## Singular Value Decomposition (dense)
 ##---------------------------------------------------------------------
 svdlas2d($a, $maxiters, $end, $kappa, $ut, $s, $vt);

 ##---------------------------------------------------------------------
 ## Singular Value Decomposition (sparse, using direct whichND()-encoding)
 ##---------------------------------------------------------------------
 $which  = whichND($a)->qsortvec();
 $nzvals = indexND($a,$which);

 svdlas2w($which, $nzvals, $n, $m, $maxiters, $end, $kappa, $ut, $s, $vt);

 ##---------------------------------------------------------------------
 ## Singular Value Decomposition (sparse, using PDL::CCS encoding)
 ##---------------------------------------------------------------------
 use PDL::CCS;
 ($ptr,$rowids,$nzvals) = ccsencode($a);
 $ptr->reshape($ptr->nelem+1);
 $ptr->set(-1, $rowids->nelem);

 svdlas2($ptr, $rowids, $nzvals, $m, $maxiters, $end, $kappa, $ut, $s, $vt);

 ##---------------------------------------------------------------------
 ## SVD decoding (lookup)
 ##---------------------------------------------------------------------
 $vals = svdindexND ($u, $s, $v, $which);
 $vals = svdindexNDt($ut,$s,$vt, $which);
 $vals = svdindexccs($u, $s, $v, $ptr,$rowids);
 $err  = svderror   ($u, $s, $v, $ptr,$rowids,$nzvals);

=head1 DESCRIPTION

PDL::SVDLIBC provides a PDL interface to the SVDLIBC routines
for singular value decomposition of large sparse matrices.
SVDLIBC is available from http://tedlab.mit.edu/~dr/SVDLIBC/

=cut

EOPM
## /pm additions
##------------------------------------------------------

##------------------------------------------------------
## Exports: None
#pp_export_nothing();


##------------------------------------------------------
## Includes / defines
pp_addhdr(<<'EOH');

#include <svdlib.h>

/*#define CDEBUG 1*/
/*#define DEBUG_CODE 1*/

#if defined(CDEBUG) || defined(DEBUG_CODE)
# define SVD_VERBOSITY_DEFAULT 1
#else
# define SVD_VERBOSITY_DEFAULT 0
#endif

EOH


##======================================================================
## C Utilities
##======================================================================

pp_addhdr(<<'EOH');

/*--------------------------------------------------------------*/
double **p2pp_dbl(int nrows, int ncols, double *p)
{
  int i;
#ifdef CDEBUG
  int j;
#endif
  double **matrix;
  if (!(p && nrows && ncols)) return NULL;
  matrix = malloc(nrows*sizeof(double**));
  //New(0,matrix,nrows,double*);
  for (i=0; i < nrows; i++) {
    matrix[i] = p + (i*ncols);
#ifdef CDEBUG
    printf("p2pp_dbl(nr=%d,nc=%d,p=%p) : (p+%ld*%ld)=%p\n", nrows,ncols,p, i,ncols,matrix[i]);
    for (j=0; j < ncols; j++) {
      printf("p2pp_dbl: [i=%ld][j=%ld] : val=%g\n", i, j, matrix[i][j]);
    }
#endif
  }
  return matrix;
}

/*--------------------------------------------------------------*/
static void pp2pdl(int nrows, int ncols, double **pp, double *p)
{
  int i,j;
  for (i=0; i<nrows; i++) {
    for (j=0; j<ncols; j++) {
      p[i*ncols+j] = pp[i][j];
    }
  }
}

/*--------------------------------------------------------------*/
static void pp2pdl_indx(int nrows, int ncols, __SVDLIBC_LONG **pp, __SVDLIBC_LONG *p)
{
  int i,j;
  for (i=0; i<nrows; i++) {
    for (j=0; j<ncols; j++) {
      p[i*ncols+j] = pp[i][j];
    }
  }
}

/*--------------------------------------------------------------*/
static void svdrec2pdls(SVDRec svdr, double *up, double *sp, double *vp)
{
  pp2pdl(svdr->Ut->rows, svdr->Ut->cols, svdr->Ut->value, up);
  pp2pdl(1,              svdr->d,        &(svdr->S),      sp);
  pp2pdl(svdr->Vt->rows, svdr->Vt->cols, svdr->Vt->value, vp);
}

/*--------------------------------------------------------------*/
#ifdef DEBUG_CODE
static void showpp_indx(const char *name, int nrows, int ncols, __SVDLIBC_LONG **pp)
{
  int i,j;
  printf("\n");
  for (i=0; i<nrows; i++) {
    for (j=0; j<ncols; j++) {
      printf("%s[%ld/%ld][%ld/%ld] = %ld\n", name, i,nrows, j,ncols, pp[i][j]);
    }
  }
}
#endif

/*--------------------------------------------------------------*/
#ifdef DEBUG_CODE
static void showpp_dbl(const char *name, int nrows, int ncols, double **pp)
{
  int i,j;
  printf("\n");
  for (i=0; i<nrows; i++) {
    for (j=0; j<ncols; j++) {
      printf("%s[%ld/%ld][%ld/%ld] = %g\n", name, i,nrows, j,ncols, pp[i][j]);
    }
  }
}
#endif

EOH

##======================================================================
## Bootstrap code
##======================================================================
pp_add_boot(<<'EOB');

 /*-- initialize svdverbosity level to zero --*/
 SVDVerbosity = SVD_VERBOSITY_DEFAULT;

EOB

##======================================================================
## PDL::PP Wrappers
##======================================================================

##======================================================================
## SVDLIBC globals
pp_addpm(<<'EOPM');

use strict;

=pod

=head1 SVDLIBC Globals

There are several global data structures still lurking in the
SVDLIBC code, so expect problems if you are trying to run more
than one 'las2' procedure at once (even in different processes).

PDL::SVDLIBC provides access to (some of) the SVDLIBC globals
through the following functions, which are not exported.

=cut

EOPM

##======================================================================
## SVD Globals
##======================================================================

pp_addpm(<<'EOPM');
=pod

=head2 PDL::SVDLIBC::verbosity()

=head2 PDL::SVDLIBC::verbosity($level)

Get/set the current SVDLIBC verbosity level.
Valid values for $level are between 0 (no messages) and
2 (many messages).

=cut

EOPM

pp_addxs('','

int verbosity(...)
CODE:
  if (items >= 1) SVDVerbosity = SvIV(ST(0));
  RETVAL = SVDVerbosity;
OUTPUT:
  RETVAL

');


##--------------------------------------------------------------
## SVD Globals: version
pp_addpm(<<'EOPM');

=pod

=head2 PDL::SVDLIBC::svdVersion()

Returns a string representing the SVDLIBC version
this module was compiled with.

=cut

EOPM

pp_addxs('','

char *
svdVersion()
CODE:
  RETVAL = SVDVersion;
OUTPUT:
  RETVAL

');


##======================================================================
## SVD Utilities

pp_addpm(<<'EOPM');

=pod

=head1 SVD Utilities

=cut

EOPM

pp_def
  ('_svdccsencode',
   #Pars=> q(double a(n,m); longlong [o]ptr(n1); longlong [o]rowids(nnz); double [o]nzvals(nnz)),
   Pars => qq(double a(n,m); $INDX\      [o]ptr(n1); $INDX\      [o]rowids(nnz); double [o]nzvals(nnz)),
   Code =>
('
  struct dmat dm;
  SMat        sm;
  dm.rows  = $SIZE(m);
  dm.cols  = $SIZE(n);

  /*printf("p2pp_dbl()\n");*/
  dm.value = p2pp_dbl($SIZE(m), $SIZE(n), $P(a));

  /*printf("svdConvertDtoS()\n");*/
  sm = svdConvertDtoS(&dm);

  /*printf("pp2pdl()\n");*/
  pp2pdl_indx(1, $SIZE(n)+1, &sm->pointr, (__SVDLIBC_LONG *) $P(ptr));
  pp2pdl_indx(1, sm->vals,   &sm->rowind, (__SVDLIBC_LONG *) $P(rowids));
  pp2pdl     (1, sm->vals,   &sm->value,  (double   *) $P(nzvals));

  /*-- cleanup --*/
  /*printf("cleanup()\n");*/
  if (dm.value) free(dm.value);
  if (sm)       svdFreeSMat(sm);
'),
  );
#pp_add_exported('', 'svdccsencode');

##------------------------------------------------------
## svdlas2a() : singular value decomposition (sparse, ccs, convenience)
pp_add_exported('','svdlas2a');
pp_addpm(<<'EOPM');

=pod

=head2 svdlas2a

=for sig

    indx    ptr(nplus1);
    indx    rowids(nnz);
    double  nzvals(nnz);
    indx    m();          ##-- default: max($rowids)+1
    int     d();          ##-- default: max(nplus1-1,m)
    int     iterations(); ##-- default: 2*$d
    double  end(2);       ##-- default: [-1e-30,1e-30]
    double  kappa();      ##-- default: 1e-6
    double  [o]ut(m,d);   ##-- default: new
    double  [o] s(d);     ##-- default: new
    double  [o]vt(n,d);   ##-- default: new

Uses a variant of the single-vector Lanczos method (Lanczos, 1950)
to compute the singular value decomposition of a sparse matrix with
$m() rows and data encoded
in Harwell-Boeing sparse format in the input parameters $ptr(), $rowids(),
and $nzvals().  See L<"PDL::CCS"> for a way to acquire these parameters
from a dense input matrix, but note that for svdlas2(), the
column pointer $ptr() is of size ($n+1) for a dense matrix $a with
$n columns, where $ptr($n)==$nnz is the total number of nonzero
values in $a.

$iterations() is the maximum number of Lanczos iterations to perform.

$end() specifies two endpoints of an interval within which all unwanted
eigenvalues lie.

$kappa() is a double containing the relative accuracy of Ritz
values acceptable as eigenvalues.

The left singular components are returned in the matrix $ut(),
the singular values themselved in the vector $s(), and the
right singular components in the matrix $vt().  Note that
$ut() and $vt() are transposed, and must be specified explicitly
in the call, so that the degree of reduction (the size parameter $d)
can be determined.  If $d==$n, then a full decomposition
will be computed, and on return, $ut() and $vt() should be transposed
instances of the matrices $u() and $v() as returned by PDL::MatrixOps::svd().

The Lanczos method as used here seems to be consistently the
fastest. This algorithm has the drawback that the low order singular
values may be relatively imprecise, but that is not a problem for most
users who only want the higher-order values or who can tolerate some
imprecision.

See also: svdlas2aw(), svdlas2d()

=cut

## ($iters,$end,$kappa,$ut,$s,$vt) = svddefaults($n=$nrows,$m=$ncols,$d, $iters,...)
## + returns default values
## + changed calling conventions in v0.14
##   - WAS: svddefaults($nrows,$cols, $d,$iters,...) ##-- SVDLIBC-style (col-primary)
##        ~ svddefaults($m,    $n,    $d,$iters,...) ##-- SVDLIBC-style (for dense $a(n,m))
##   - NOW: svddefaults($n,    $m,    $d,$iters,...) ##-- pdl-style
sub svddefaults {
    my ($n,$m,$d, $iters,$end,$kappa,$ut,$s,$vt) = @_;
    $n     = $n->at(0) if (UNIVERSAL::isa($n,'PDL'));
    $m     = $m->at(0) if (UNIVERSAL::isa($m,'PDL'));
    $d     = ($n >= $m ? $n : $m) if (!defined($d));
    $iters = 2*$d if (!defined($iters));
    $end   = pdl(double,[-1e-30,1e-30]) if (!defined($end));
    $kappa = pdl(double,1e-6) if (!defined($kappa));
    $ut    = PDL->zeroes(double,$m,$d) if (!defined($ut));
    $s     = PDL->zeroes(double,   $d) if (!defined($s));
    $vt    = PDL->zeroes(double,$n,$d) if (!defined($vt));
    return ($iters,$end,$kappa,$ut,$s,$vt);
}

sub svdlas2a {
    my ($ptr,$rowids,$nzvals, $m,$d, @args) = @_;
    $m = $rowids->flat->max+1 if (!defined($m));
    @args  = svddefaults($ptr->dim(0)-1,$m,$d,@args);
    svdlas2($ptr,$rowids,$nzvals,$m,@args);
    return @args[3..5];
}

EOPM


##------------------------------------------------------
## svdLAS2() : singular value decomposition (sparse, ccs, low-level)
pp_def
  ('svdlas2',
   Pars => join("\n    ",
		'',
		qq($INDX   ptr(nplus1);),  ##-- longlong
		qq($INDX   rowids(nnz);),  ##-- longlong
		qq(double  nzvals(nnz);),
		qq($INDX   m();),	   ##-- longlong
		qq(int     iterations();), ##-- longlong
		qq(double  end(2);),
		qq(double  kappa();),
		qq(double  [o]ut(m,d);),
		qq(double  [o] s(d);),
		qq(double  [o]vt(n,d);),
		'',
	       ),
   Code =>
('
  struct smat sm;
  SVDRec svdr;

  /*-- setup sparse matrix --*/
  sm.rows   = (__SVDLIBC_LONG) $m();
  sm.cols   = (__SVDLIBC_LONG) $SIZE(n);
  sm.vals   = (__SVDLIBC_LONG) $SIZE(nnz);
  sm.pointr = (__SVDLIBC_LONG *)$P(ptr);
  sm.rowind = (__SVDLIBC_LONG *)$P(rowids);
  sm.value  = (double *)$P(nzvals);

  /*-- view decoded stuff --*/
#ifdef DEBUG_CODE
  printf("sm: rows=%ld; cols=%ld; vals=%ld\n", sm.rows, sm.cols, sm.vals);
  showpp_indx("sm.pointr", 1, sm.cols+1,  &sm.pointr);
  showpp_indx("sm.rowind", 1, sm.vals,    &sm.rowind);
  showpp_dbl ("sm.value",  1, sm.vals,  &sm.value);
  printf("--\n");
#endif

  /*-- run SVD --*/
  svdr = svdLAS2(&sm, $SIZE(d), $iterations(), $P(end), $kappa());
  svdrec2pdls(svdr, $P(ut), $P(s), $P(vt));

  /*-- output some stats (debug) --*/
#ifdef DEBUG_CODE
  printf("svdrec.d=%d ~ d=%d\n", svdr->d, $SIZE(d));
  printf("svdrec.Ut.rows=%ld ~ d=%d\n", svdr->Ut->rows, $SIZE(d));
  printf("svdrec.Ut.cols=%ld ~ m=%d\n", svdr->Ut->cols, $SIZE(m));
  printf("svdrec.Vt.rows=%ld ~ n=%d\n", svdr->Vt->cols, $SIZE(n));
  printf("svdrec.Vt.cols=%ld ~ d=%d !~ n=%d\n", svdr->Vt->cols, $SIZE(d), $SIZE(n));
#endif

  /*-- pre-cleanup --*/
  sm.pointr = NULL;
  sm.rowind = NULL;
  sm.value  = NULL;

  /*-- cleanup --*/
  if (svdr) svdFreeSVDRec(svdr);
'),
   Doc =>
q(
Guts for svdlas2a().
No default instantiation, and slightly different calling conventions.
),
);
#pp_add_exported('', 'svdlas2');


##------------------------------------------------------
## svdlas2aw() : singular value decomposition (sparse, whichND, convenience)

pp_add_exported('','svdlas2aw');
pp_addpm(<<'EOPM');

=pod

=head2 svdlas2aw

=for sig

    indx    which(nnz,2); ##-- sorted indices of non-zero values
    double  nzvals(nnz);  ##-- non-zero values
    indx    n();          ##-- default: max($indx(0,:))+1
    indx    m();          ##-- default: max($indx(1,:))+1
    int     d();          ##-- default: max(n,m)
    int     iterations(); ##-- default: 2*$d
    double  end(2);       ##-- default: [-1e-30,1e-30]
    double  kappa();      ##-- default: 1e-6
    double  [o]ut(m,d);   ##-- default: new
    double  [o] s(d);     ##-- default: new
    double  [o]vt(n,d);   ##-- default: new

As for svdlas2a(), but implicitly converts the index-encoded matrix
($which(),$nzvals()) to an internal CCS-like sparse format
before computing the decomposition.
Should be slightly more efficient than using PDL::CCS::ccsencode()
or similar if you already have $which() and $nzvals() available.
These can be attained for a dense matric $a() e.g. by:

 $which  = $a->whichND->qsortvec->xchg(0,1);
 $nzvals = $a->indexND($which->xchg(0,1));

For convenience, $which() will be implicitly transposed if it is passed
as a list-of-vectors C<$whichND(2,nnz)> such as returned by L<whichND()|PDL::Primitive/whichND>,
but it must still be lexicographically sorted.

See also: svdlas2a(), svdlas2d()

=cut

sub svdlas2aw {
    my ($which,$nzvals, $n,$m,$d, @args) = @_;
    $which = $which->xchg(0,1) if ($which->dim(1) > $which->dim(0));
    $n    = $which->slice(":,0")->max+1 if (!defined($n));
    $m    = $which->slice(":,1")->max+1 if (!defined($m));
    @args = svddefaults($n,$m,$d,@args);
    svdlas2w($which,$nzvals,$n,$m,@args);
    return @args[3..5];
}

EOPM

##------------------------------------------------------
## svdlas2w() : singular value decomposition (sparse, whichND, low-level)
pp_def
  ('svdlas2w',
   Pars => join("\n    ",
		'',
		qq($INDX   whichi(nnz,Two);),  ##-- longlong
		qq(double  nzvals(nnz);),
		qq($INDX   n();),	     ##-- longlong
		qq($INDX   m();),	     ##-- longlong
		qq(int     iterations();),   ##-- longlong
		qq(double  end(2);),
		qq(double  kappa();),
		qq(double  [o]ut(m,d);),
		qq(double  [o] s(d);),
		qq(double  [o]vt(n,d);),
		'',
	       ),
   Code =>
('
  struct smat sm;
  SVDRec svdr;
  __SVDLIBC_LONG ci,nzi,nzc, dimN=$n();

  /*-- setup sparse matrix --*/
  sm.rows   = (__SVDLIBC_LONG) $m();
  sm.cols   = (__SVDLIBC_LONG) $n();
  sm.vals   = (__SVDLIBC_LONG) $SIZE(nnz);
  sm.rowind = (__SVDLIBC_LONG *) ($P(whichi) + $SIZE(nnz));
  sm.value  = (double *) $P(nzvals);

  /*-- sanity check: dimension "Two" --*/
  if ($SIZE(Two) != 2) {
     croak("svdlas2w(): bogus input dimension Two=%ld for indices whichi(nnz,Two) must be 2", $SIZE(Two));
  }

  /*-- sanity check: sorted whichi() --*/
  for (ci=0,nzi=0; nzi < $SIZE(nnz); ++nzi) {
    nzc = $whichi(nnz=>nzi,Two=>0);
    if ( nzc < ci )
      croak("svdlas2w(): input indices whichi() are not sorted at nzi=%ld, nzc=%ld, current ci=%ld!", nzi, nzc, ci);
    ci = nzc;
  }

  /*-- construct ptr() --*/
  sm.pointr = (__SVDLIBC_LONG *) malloc((1+dimN)*sizeof(__SVDLIBC_LONG));
  for (ci=0,nzi=0; nzi < $SIZE(nnz); ++nzi) {
    nzc = $whichi(nnz=>nzi,Two=>0);
    for ( ; ci <= nzc; ++ci) {
      sm.pointr[ci] = nzi;
    }
  }
  for ( ; ci <= dimN; ++ci) {
    sm.pointr[ci] = $SIZE(nnz);
  }

  /*-- run SVD --*/
  svdr = svdLAS2(&sm, $SIZE(d), $iterations(), $P(end), $kappa());
  svdrec2pdls(svdr, $P(ut), $P(s), $P(vt));

  /*-- pre-cleanup --*/
  if (sm.pointr) free(sm.pointr);
  sm.pointr = NULL;
  sm.rowind = NULL;
  sm.value  = NULL;

  /*-- cleanup --*/
  if (svdr) svdFreeSVDRec(svdr);
'),
   Doc =>
q(
Guts for svdlas2a().
No default instantiation, and slightly different calling conventions.
),
);
#pp_add_exported('', 'svdlas2w');

##------------------------------------------------------
## svdlas2ad() : singular value decomposition (dense): convenience
pp_add_exported('','svdlas2ad');
pp_addpm(<<'EOPM');

=pod

=head2 svdlas2ad

=for sig

    double  a(n,m);
    int     d();          ##-- default: max($n,$m)
    int     iterations(); ##-- default: 2*$d
    double  end(2);       ##-- default: [-1e-30,1e-30]
    double  kappa();      ##-- default: 1e-6
    double  [o]ut(m,d);   ##-- default: new
    double  [o] s(d);     ##-- default: new
    double  [o]vt(n,d);   ##-- default: new

As for svdlas2(), but implicitly converts the dense input matrix
$a() to sparse format before computing the decomposition.

=cut

sub svdlas2ad {
    my ($a,$d, @args) = @_;
    @args = svddefaults($a->dim(0),$a->dim(1),$d,@args);
    svdlas2d($a,@args);
    return @args[3..5];
}

EOPM

##------------------------------------------------------
## svdlas2d() : singular value decomposition (dense)
pp_def
  ('svdlas2d',
   Pars => join("\n    ",
		'',
		q(double  a(n,m);),
		q(int     iterations();),
		q(double  end(2);),
		q(double  kappa();),
		q(double  [o]ut(m,d);),
		q(double  [o] s(d);),
		q(double  [o]vt(n,d);),
		'',
	       ),
   Code =>
('
  struct   dmat dm;
  SMat     smp;
  SVDRec   svdr;

  /*-- setup dense matrix --*/
  dm.rows  = $SIZE(m);
  dm.cols  = $SIZE(n);
  dm.value = p2pp_dbl($SIZE(m), $SIZE(n), $P(a));

  /*-- generate sparse matrix --*/
  smp = svdConvertDtoS(&dm);

  /*-- compute svd --*/
  svdr = svdLAS2(smp, $SIZE(d), $iterations(), $P(end), $kappa());
  svdrec2pdls(svdr, $P(ut), $P(s), $P(vt));

  /*-- cleanup --*/
  if (svdr)     svdFreeSVDRec(svdr);
  if (smp)      svdFreeSMat(smp);
  if (dm.value) free(dm.value);
'),
   Doc =>
q(
Guts for _svdlas2d().
),
);
#pp_add_exported('', 'svdlas2d');

##======================================================================
## SVD decoding

##------------------------------------------------------
## svdindexND() : sparse decoded lookup (whichND-style)
pp_def
  ('svdindexND',
   Pars => join("\n    ",
		'',
		qq( u(d,m);),
		qq( s(d);),
		qq( v(d,n);),
		qq($INDX which(Two,nnz);),
		qq([o] vals(nnz);),
		'',
	       ),
   Code =>
('
    /*-- sanity check: dimension "Two" --*/
    if ($SIZE(Two) != 2) {
     croak("svdlas2w(): bogus input dimension Two=%ld for indices whichi(nnz,Two) must be 2", $SIZE(Two));
    }

    /*-- guts --*/
    loop(nnz) %{
      $GENERIC(vals) v = 0;
      loop(d) %{
	__SVDLIBC_LONG ni=$which(Two=>0), mi=$which(Two=>1);
	v += $u(m=>mi) * $s() * $v(n=>ni);
      %}
      $vals() = v;
    %}
'),
   Doc =>
q(
Lookup selected values in an SVD-encoded matrix, L<indexND()|PDL::Primitive/indexND>-style.
Should be equivalent to:

 ($u x stretcher($s) x $v->xchg(0,1))->indexND($which)

or its PDL-friendlier variant:

 ($u * $s)->matmult($v->xchg(0,1))->indexND($which)

... but only computes the specified values $which(), avoiding
memory bottlenecks for large sparse matrices.
This is a pure PDL::PP method, so you can use e.g.
C<float> for the SVD-encoded matrix if you wish.

),
);

##------------------------------------------------------
## svdindexNDt() : sparse decoded lookup (transposed svd, whichND-style)

pp_add_exported('','svdindexNDt');
pp_addpm(<<'EOPM');

=pod

=head2 svdindexNDt

=for sig

    ut(m,d); s(d); vt(n,d); indx which(Two,nnz); [o] vals(nnz);

Wrapper for L<svdindexND()|/svdindexND> accepting transposed singular components
$ut() and $vt() as returned by e.g. L<svdlas2()|/svdlas2>.

=cut

sub svdindexNDt {
   return svdindexND($_[0]->xchg(0,1),$_[1],$_[2]->xchg(0,1),@_[3..$#_]);
}

EOPM

##------------------------------------------------------
## svdindexccs() : sparse decoded lookup, ptr+rowids
pp_def
  ('svdindexccs',
   Pars => join("\n    ",
		'',
		qq( u(d,m);),
		qq( s(d);),
		qq( v(d,n);),
		qq($INDX ptr(nplus1);),
		qq($INDX rowids(nnz);),
		qq([o] vals(nnz);),
		'',
	       ),
   Code =>
('
    /*-- sanity checks: ptr --*/
    if ($SIZE(nplus1) <= $SIZE(n)) {
       croak("svdindexccs(): bogus input dimension nplus1=%ld must be greater than n=%ld", $SIZE(nplus1), $SIZE(n));
    }

    /*-- guts --*/
    loop(n) %{
      __SVDLIBC_LONG n1 = n+1;
      __SVDLIBC_LONG nzi, nzj=$ptr(nplus1=>n1);
      for (nzi=$ptr(nplus1=>n); nzi < nzj; ++nzi) {
	__SVDLIBC_LONG mi = $rowids(nnz=>nzi);
	$GENERIC(vals) v=0;
	loop(d) %{ v += $u(m=>mi) * $s() * $v(); %}
	$vals(nnz=>nzi) = v;
      }
    %}
'),
   Doc =>
q(
Lookup selected values in an SVD-encoded matrix using L<PDL::CCS|/PDL::CCS>-style indexing
as for L<svdlas2a()|/svdlas2a>.

),
);

##------------------------------------------------------
## svderror() : compute sum of squared errors for sparse matrix
pp_def
  ('svderror',
   Pars => join("\n    ",
		'',
		qq(u(d,m);),
		qq(s(d);),
		qq(v(d,n);),
		qq($INDX ptr(nplus1);),
		qq($INDX rowids(nnz);),
		qq(nzvals(nnz);),
                qq([o]err();),
		'',
	       ),
   Code =>
('
    $GENERIC(err) e=0;
    __SVDLIBC_LONG n1, nzi,nzj;
    $GENERIC(rowids) ri;

    /*-- sanity checks: ptr --*/
    if ($SIZE(nplus1) <= $SIZE(n)) {
       croak("svderror(): bogus input dimension nplus1=%ld must be greater than n=%ld", $SIZE(nplus1), $SIZE(n));
    }

    /*-- sanity checks: sorted row-ids --*/
    loop(n) %{
      n1  = n+1;
      nzj = $ptr(nplus1=>n1);
      ri  = 0;
      for (nzi=$ptr(nplus1=>n); nzi < nzj; ++nzi) {
        if ($rowids(nnz=>nzi) < ri)
          croak("svderror(): input rowids() are not sorted at nnz=%ld", nzi);
	ri = $rowids(nnz=>nzi);
      }
    %}

    /*-- guts --*/
    loop(n) %{
      n1  = n+1;
      nzi = $ptr(nplus1=>n);
      nzj = $ptr(nplus1=>n1);
      ri  = nzi < nzj ? $rowids(nnz=>nzi) : (__SVDLIBC_LONG)-1;
      loop(m) %{
         /*-- decode value --*/
         $GENERIC(nzvals) v= 0;
         loop(d) %{ v += $u() * $s() * $v(); %}

         /*-- dispatch: is this the next encoded value? --*/
         if (m==ri) {
           v -= $nzvals(nnz=>nzi);
           ++nzi;
           ri = nzi < nzj ? $rowids(nnz=>nzi) : (__SVDLIBC_LONG)-1;
         }
         e += v*v;
      %}
    %}

    $err() = e;
'),
   Doc =>
q(
Compute sum of squared errors for a sparse SVD-encoded matrix.
Should be equivalent to:

 sum( ($a - ($u x stretcher($s) x $v->xchg(0,1)))**2 )

... but computes all values on-the-fly, avoiding
memory bottlenecks for large sparse matrices.
This is a pure PDL::PP method, so you can use e.g.
C<float> for the SVD-encoded matrix if you wish.

Error contributions are computed even for "missing" (zero) values,
so running time is O(n*m).
Consider using L<svdindexND()|/svdindexND> or L<svdindexccs()|/svdindexccs>
to compute error rates
only for non-missing values if you have a large sparse matrix, e.g.:

 $svdvals = svdindexccs($u,$s,$v, $ptr,$rowids);
 $err_nz  = ($nzvals-$svdvals)->pow(2)->sumover;

),
);

##======================================================================
## Footer Administrivia
##======================================================================

##------------------------------------------------------
## footer: pm additions
pp_addpm(<<'EOPM');

##---------------------------------------------------------------------
=pod

=head1 ACKNOWLEDGEMENTS

Perl by Larry Wall.

PDL by Karl Glazebrook, Tuomas J. Lukka, Christian Soeller, and others.

SVDLIBC by Dough Rohde.

SVDPACKC by Michael Berry, Theresa Do, Gavin O'Brien, Vijay Krishna and Sowmini Varadhan.

=cut

##----------------------------------------------------------------------
=pod

=head1 KNOWN BUGS

Globals still lurk in the depths of SVDLIBC.

=cut


##---------------------------------------------------------------------
=pod

=head1 AUTHOR

Bryan Jurish E<lt>moocow@cpan.orgE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2005-2015, Bryan Jurish.  All rights reserved.

This package is free software, and entirely without warranty.
You may redistribute it and/or modify it under the same terms
as Perl itself, either version 5.20.2 or any newer version of Perl 5
you have available.

The SVDLIBC sources included in this distribution are themselves
released under a BSD-like license. See the file
F<SVDLIBC/Manual/license.html> in the PDL-SVDLIBC source distribution
for details.

=head1 SEE ALSO

perl(1), PDL(3perl), PDL::CCS(3perl), SVDLIBC documentation.

=cut

EOPM


# Always make sure that you finish your PP declarations with
# pp_done
pp_done();
##----------------------------------------------------------------------
